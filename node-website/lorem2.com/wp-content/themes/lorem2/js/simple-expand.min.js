!(function (e) {
  "use strict";
  function t() {
    var t = this;
    (t.defaults = {
      hideMode: "fadeToggle",
      defaultSearchMode: "parent",
      defaultTarget: ".collapseThis",
      throwOnMissingTarget: !0,
      keepStateInCookie: !1,
      cookieName: "simple-expand",
    }),
      (t.settings = {}),
      e.extend(t.settings, t.defaults),
      (t.findLevelOneDeep = function (t, n, i) {
        return t.find(n).filter(function () {
          return !e(this).parentsUntil(t, i).length;
        });
      }),
      (t.setInitialState = function (e, n) {
        t.readState(e)
          ? (e.removeClass("collapsed").addClass("expanded"), t.show(n))
          : (e.removeClass("expanded").addClass("collapsed"), t.hide(n));
      }),
      (t.hide = function (e) {
        "fadeToggle" === t.settings.hideMode
          ? e.hide()
          : "basic" === t.settings.hideMode && e.hide();
      }),
      (t.show = function (e) {
        "fadeToggle" === t.settings.hideMode
          ? e.show()
          : "basic" === t.settings.hideMode && e.show();
      }),
      (t.checkKeepStateInCookiePreconditions = function () {
        if (t.settings.keepStateInCookie && void 0 === e.cookie)
          throw new Error(
            "simple-expand: keepStateInCookie option requires $.cookie to be defined."
          );
      }),
      (t.readCookie = function () {
        var n = e.cookie(t.settings.cookieName);
        return null === n || "" === n || void 0 === n ? {} : JSON.parse(n);
      }),
      (t.readState = function (e) {
        if (!t.settings.keepStateInCookie) return e.hasClass("expanded");
        var n = e.attr("Id");
        if (void 0 !== n) {
          var i = t.readCookie();
          return void 0 !== i[n] ? !0 === i[n] : e.hasClass("expanded");
        }
      }),
      (t.saveState = function (n, i) {
        if (t.settings.keepStateInCookie) {
          var a = n.attr("Id");
          if (void 0 !== a) {
            var o = t.readCookie();
            (o[a] = i),
              e.cookie(t.settings.cookieName, JSON.stringify(o), {
                raw: !0,
                path: window.location.pathname,
              });
          }
        }
      }),
      (t.toggle = function (n, i) {
        var a = t.toggleCss(n);
        return (
          "fadeToggle" === t.settings.hideMode
            ? i.fadeToggle(150)
            : "basic" === t.settings.hideMode
            ? i.toggle()
            : e.isFunction(t.settings.hideMode) && t.settings.hideMode(n, i, a),
          t.saveState(n, a),
          !1
        );
      }),
      (t.toggleCss = function (e) {
        return e.hasClass("expanded")
          ? (e.toggleClass("collapsed expanded"), !1)
          : (e.toggleClass("expanded collapsed"), !0);
      }),
      (t.findTargets = function (n, i, a) {
        var o = [];
        if ("absolute" === i) o = e(a);
        else if ("relative" === i) o = t.findLevelOneDeep(n, a, a);
        else if ("parent" === i) {
          var s = n.parent();
          do {
            0 === (o = t.findLevelOneDeep(s, a, a)).length && (s = s.parent());
          } while (0 === o.length && 0 !== s.length);
        }
        return o;
      }),
      (t.activate = function (n, i) {
        e.extend(t.settings, i),
          t.checkKeepStateInCookiePreconditions(),
          n.each(function () {
            var n = e(this),
              i = n.attr("data-expander-target") || t.settings.defaultTarget,
              a =
                n.attr("data-expander-target-search") ||
                t.settings.defaultSearchMode,
              o = t.findTargets(n, a, i);
            if (0 === o.length) {
              if (t.settings.throwOnMissingTarget)
                throw "simple-expand: Targets not found";
              return this;
            }
            t.setInitialState(n, o),
              n.click(function () {
                return t.toggle(n, o);
              });
          });
      });
  }
  (window.SimpleExpand = t),
    (e.fn.simpleexpand = function (e) {
      return new t().activate(this, e), this;
    });
})(jQuery);
